function drawLine(ctx,x1,y1,x2,y2){ctx.beginPath();ctx.moveTo(x1,y1);ctx.lineTo(x2,y2);ctx.closePath();ctx.stroke()}
function drawCircle(ctx,x,y,r,margin){ctx.beginPath();ctx.arc(x+r,y+r,r-margin,0,2*Math.PI,!0);ctx.closePath();ctx.fill()}
function drawRoundedRect(ctx,x,y,w,h,r){if(w<2*r)r=w/2;if(h<2*r)r=h/2;ctx.beginPath();ctx.moveTo(x+r,y);ctx.arcTo(x+w,y,x+w,y+h,r);ctx.arcTo(x+w,y+h,x,y+h,r);ctx.arcTo(x,y+h,x,y,r);ctx.arcTo(x,y,x+w,y,r);ctx.closePath();ctx.fill()}
var Url=(function(){var nonVolatileHashChange=!1;var hashChangedFn;function init(onHashChanged){hashChangedFn=onHashChanged;window.onhashchange=onHashChangedManager}
function onHashChangedManager(e){if(nonVolatileHashChange){nonVolatileHashChange=!1;e.preventDefault();e.stopPropagation()}
else hashChangedFn(e)}
function setHashNonVolatile(val){if(window.location.hash.replace('#')!=val){nonVolatileHashChange=!0;window.location.hash=val}}
function getQueryString(name,url){if(!url)url=window.location.href;name=name.replace(/[\[\]]/g,"\\$&");var regex=new RegExp("[?&]"+name+"(=([^&#]*)|&|#|$)"),results=regex.exec(url);if(!results)return null;if(!results[2])return!0;return decodeURIComponent(results[2].replace(/\+/g," "))}
return{init:init,setHash:setHashNonVolatile,getQueryString:getQueryString}})();function bitCount(x){x=x-((x>>>1)&0x55555555);x=(x&0x33333333)+((x>>>2)&0x33333333);return((((x+(x>>>4))&0x0F0F0F0F)*0x01010101)>>>24)}
function bitScan(x){bits=[];while(x){var minBit=x&-x;bits.push(Math.log2(minBit));x&=x-1}
return bits}
var FLIP_BYTE=[0x00,0x04,0x02,0x06,0x01,0x05,0x03,0x07,0x80,0x84,0x82,0x86,0x81,0x85,0x83,0x87,0x40,0x44,0x42,0x46,0x41,0x45,0x43,0x47,0xc0,0xc4,0xc2,0xc6,0xc1,0xc5,0xc3,0xc7,0x20,0x24,0x22,0x26,0x21,0x25,0x23,0x27,0xa0,0xa4,0xa2,0xa6,0xa1,0xa5,0xa3,0xa7,0x60,0x64,0x62,0x66,0x61,0x65,0x63,0x67,0xe0,0xe4,0xe2,0xe6,0xe1,0xe5,0xe3,0xe7,0x10,0x14,0x12,0x16,0x11,0x15,0x13,0x17,0x90,0x94,0x92,0x96,0x91,0x95,0x93,0x97,0x50,0x54,0x52,0x56,0x51,0x55,0x53,0x57,0xd0,0xd4,0xd2,0xd6,0xd1,0xd5,0xd3,0xd7,0x30,0x34,0x32,0x36,0x31,0x35,0x33,0x37,0xb0,0xb4,0xb2,0xb6,0xb1,0xb5,0xb3,0xb7,0x70,0x74,0x72,0x76,0x71,0x75,0x73,0x77,0xf0,0xf4,0xf2,0xf6,0xf1,0xf5,0xf3,0xf7,0x08,0x0c,0x0a,0x0e,0x09,0x0d,0x0b,0x0f,0x88,0x8c,0x8a,0x8e,0x89,0x8d,0x8b,0x8f,0x48,0x4c,0x4a,0x4e,0x49,0x4d,0x4b,0x4f,0xc8,0xcc,0xca,0xce,0xc9,0xcd,0xcb,0xcf,0x28,0x2c,0x2a,0x2e,0x29,0x2d,0x2b,0x2f,0xa8,0xac,0xaa,0xae,0xa9,0xad,0xab,0xaf,0x68,0x6c,0x6a,0x6e,0x69,0x6d,0x6b,0x6f,0xe8,0xec,0xea,0xee,0xe9,0xed,0xeb,0xef,0x18,0x1c,0x1a,0x1e,0x19,0x1d,0x1b,0x1f,0x98,0x9c,0x9a,0x9e,0x99,0x9d,0x9b,0x9f,0x58,0x5c,0x5a,0x5e,0x59,0x5d,0x5b,0x5f,0xd8,0xdc,0xda,0xde,0xd9,0xdd,0xdb,0xdf,0x38,0x3c,0x3a,0x3e,0x39,0x3d,0x3b,0x3f,0xb8,0xbc,0xba,0xbe,0xb9,0xbd,0xbb,0xbf,0x78,0x7c,0x7a,0x7e,0x79,0x7d,0x7b,0x7f,0xf8,0xfc,0xfa,0xfe,0xf9,0xfd,0xfb,0xff];var PIN_COUNT=9;var BOARD_COUNT=24;var MILL_COUNT=16;var TWO_TO_24=16777216;var TWO_TO_32=4294967296;var TWO_TO_40=1099511627776;var TWO_TO_48=281474976710656;var MODE_PLACE=1;var MODE_MOVE=2;var MODE_REMOVE=4;var MODE_FLY=8;var EMPTY=-1;var TURN1=0;var TURN2=1;var STRUCT_COUNT=8;var MEN_DELIM=4;var P1=0;var P2=1;var P_MEN=2;var P1_MEN=2;var P2_MEN=3;var P_MILLS=4;var P1_MILLS=4;var P2_MILLS=5;var MODE=6;var TURN=7;var POS_TO_R=[0,0,0,3,6,6,6,3,1,1,1,3,5,5,5,3,2,2,2,3,4,4,4,3];var POS_TO_C=[0,3,6,6,6,3,0,0,1,3,5,5,5,3,1,1,2,3,4,4,4,3,2,2];var POS_TO_PARCA=[0,1,2,14,23,22,21,9,3,4,5,13,20,19,18,19,6,7,8,12,17,16,15,11];var PARCA_TO_POS=[0,1,2,8,9,10,16,17,18,7,15,23,19,11,3,22,21,20,14,13,12,6,5,4];var RC_TO_POS=[[0,-1,-1,1,-1,-1,2],[-1,8,-1,9,-1,10,-1],[-1,-1,16,17,18,-1,-1],[7,15,23,-1,19,11,3],[-1,-1,22,21,20,-1,-1],[-1,14,-1,13,-1,12,-1],[6,-1,-1,5,-1,-1,4],];var RC_TO_MASK=[[0x1,-1,-1,0x2,-1,-1,0x4],[-1,0x100,-1,0x200,-1,0x400,-1],[-1,-1,0x10000,0x20000,0x40000,-1,-1],[0x80,0x8000,0x800000,-1,0x80000,0x800,0x8],[-1,-1,0x400000,0x200000,0x100000,-1,-1],[-1,0x4000,-1,0x2000,-1,0x1000,-1],[0x40,-1,-1,0x20,-1,-1,0x10],];var BOARD_BITS=0xFFFFFF;var MILLS=[0x7,0x1c,0x70,0xc1,0x700,0x1c00,0x7000,0xc100,0x20202,0x70000,0x80808,0x202020,0x1c0000,0x700000,0x808080,0xc10000];var MILLS_BY_POS_STRIDE=[0x7,0xc1,0x7,0x20202,0x7,0x1c,0x1c,0x80808,0x1c,0x70,0x70,0x202020,0x70,0xc1,0xc1,0x808080,0x700,0xc100,0x700,0x20202,0x700,0x1c00,0x1c00,0x80808,0x1c00,0x7000,0x7000,0x202020,0x7000,0xc100,0xc100,0x808080,0x70000,0xc10000,0x20202,0x70000,0x70000,0x1c0000,0x80808,0x1c0000,0x1c0000,0x700000,0x202020,0x700000,0x700000,0xc10000,0x808080,0xc10000];var MOVES_BY_POS=[0x82,0x205,0xa,0x814,0x28,0x2050,0xa0,0x8041,0x8200,0x20502,0xa00,0x81408,0x2800,0x205020,0xa000,0x804180,0x820000,0x50200,0xa0000,0x140800,0x280000,0x502000,0xa00000,0x418000];function BB_new(){var bb=[0,0,PIN_COUNT,PIN_COUNT,0,0,MODE_PLACE,TURN1,];return bb}
function BB_toString(bb){var str='';for(var p=0;p<BOARD_COUNT;p++){var pos=PARCA_TO_POS[p];var posMask=Math.pow(2,pos);if(bb[P1]&posMask)str+='1';else if(bb[P2]&posMask)str+='2';else str+='0'}
str+=(bb[P1_MEN]&0xf);str+=(bb[P2_MEN]&0xf);str+=(bb[TURN]+1);str+=bb[MODE];return str}
function BB_fromString(str){var bb=new Uint32Array(STRUCT_COUNT);var p1Count=0;var p2Count=0;for(var p=0;p<BOARD_COUNT;p++){var pin=str.charAt(p);var pos=PARCA_TO_POS[p];if(pin=='1'){bb[P1]|=Math.pow(2,pos);p1Count++}
else if(pin=='2'){bb[P2]|=Math.pow(2,pos);p2Count++}}
bb[P1_MEN]=(p1Count<<MEN_DELIM)|parseInt(str.charAt(BOARD_COUNT));bb[P2_MEN]=(p2Count<<MEN_DELIM)|parseInt(str.charAt(BOARD_COUNT+1));for(var m=0;m<MILL_COUNT;m++){var mill=MILLS[m];if((bb[P1]&mill)==mill)bb[P1_MILLS]|=mill;if((bb[P2]&mill)==mill)bb[P2_MILLS]|=mill}
bb[TURN]=parseInt(str.charAt(BOARD_COUNT+2))-1;bb[MODE]=str.charAt(BOARD_COUNT+3);return bb}
function BB_playFromMove(bb,move){var newBoard=bb.slice();var mode=bb[MODE];if(mode==MODE_PLACE)BB_place(newBoard,RC_TO_POS[move.pr][move.pc]);else if(mode==MODE_REMOVE)BB_remove(newBoard,RC_TO_POS[move.rr][move.rc]);else if(mode&(MODE_MOVE|MODE_FLY))BB_move(newBoard,RC_TO_POS[move.sr][move.sc],RC_TO_POS[move.dr][move.dc]);return newBoard}
function BB_makeRandomPlay(bb,uids){var mode=bb[MODE];var cur=bb[TURN];var opp=+(!cur);var moves=[];if(mode==MODE_PLACE){var avail=BB_getAvailPlaces(bb,cur,opp);while(avail){var minBit=avail&-avail;moves.push(Math.log2(minBit));avail&=avail-1}
if(!moves.length)return!1;var randMove=Math.floor(Math.random()*moves.length);BB_place(bb,moves[randMove]);return!0}
else if(mode==MODE_REMOVE){var avail=BB_getAvailRemoves(bb,cur,opp);while(avail){var minBit=avail&-avail;moves.push(Math.log2(minBit));avail&=avail-1}
if(!moves.length)return!1;var randMove=Math.floor(Math.random()*moves.length);BB_remove(bb,moves[randMove]);return!0}
else if(mode==MODE_MOVE){moves=BB_getAvailMovesUnique(bb,cur,opp,uids);if(!moves.length)return!1;var randMove=Math.floor(Math.random()*(moves.length/3))*3;BB_move(bb,moves[randMove],moves[randMove+1]);uids[moves[randMove+2]]=!0;return!0}
else if(mode==MODE_FLY){moves=BB_getAvailFlysUnique(bb,cur,opp,uids);var randMove=Math.floor(Math.random()*(moves.length/3))*3;if(!moves.length)return!1;BB_move(bb,moves[randMove],moves[randMove+1]);uids[moves[randMove+2]]=!0;return!0}}
function BB_getPlays(bb){var mode=bb[MODE];var cur=bb[TURN];var opp=+(!cur);switch(mode){case MODE_PLACE:return BB_getAvailPlaces(bb,cur,opp);case MODE_MOVE:return BB_getAvailMoves(bb,cur,opp);case MODE_REMOVE:return BB_getAvailRemoves(bb,cur,opp);case MODE_FLY:return BB_getAvailFlys(bb,cur,opp);default:return[]}}
function BB_getAvailPlaces(bb,cur,opp){var open=BOARD_BITS&(~(bb[cur]|bb[opp]));return open}
function BB_getChildStates(bb,cur,opp,uids){var mode=bb[MODE];if(mode==MODE_PLACE)return BB_getPlaceRemoveStates(bb,cur,opp,uids);else return BB_getMoveFlyRemoveStates(bb,cur,opp,uids)}
function BB_getPlaceRemoveStates(bb,cur,opp,uids){var states=[];var openPlaces=BOARD_BITS&(~(bb[cur]|bb[opp]));while(openPlaces){var minPlaceBit=openPlaces&-openPlaces;openPlaces&=openPlaces-1;var placePos=Math.log2(minPlaceBit);var boardCopy=bb.slice();BB_place(boardCopy,placePos);if(boardCopy[MODE]==MODE_REMOVE){var openRemoves=BB_getAvailRemoves(boardCopy,cur,opp);while(openRemoves){var minRemoveBit=openRemoves&-openRemoves;openRemoves&=openRemoves-1;var removePos=Math.log2(minRemoveBit);var boardRemoveCopy=boardCopy.slice();BB_remove(boardRemoveCopy,removePos);states.push(boardRemoveCopy)}}
else{states.push(boardCopy)}}
return states}
var uidCut=0;function BB_getMoveFlyRemoveStates(bb,cur,opp,uids){var states=[];var pins=bb[cur];var openPlaces=BOARD_BITS&(~(pins|bb[opp]));var mode=bb[MODE];while(pins){var minPinBit=pins&-pins;pins&=pins-1;var srcPos=Math.log2(minPinBit);var avail=(mode==MODE_MOVE)?openPlaces&MOVES_BY_POS[srcPos]:openPlaces;while(avail){var minAvailBit=avail&-avail;avail&=avail-1;var dstPos=Math.log2(minAvailBit);var boardCopy=bb.slice();BB_move(boardCopy,srcPos,dstPos);if(boardCopy[MODE]==MODE_REMOVE){var openRemoves=BB_getAvailRemoves(boardCopy,cur,opp);while(openRemoves){var minRemoveBit=openRemoves&-openRemoves;openRemoves&=openRemoves-1;var removePos=Math.log2(minRemoveBit);var boardRemoveCopy=boardCopy.slice();BB_remove(boardRemoveCopy,removePos);states.push(boardRemoveCopy)}}
else{states.push(boardCopy)}}}
return states}
function BB_getAvailMoves(bb,cur,opp){var open=BOARD_BITS&(~(bb[cur]|bb[opp]));var pins=bitScan(bb[cur]);var moves=[];for(var p=0;p<pins.length;p++){var pos=pins[p];var avail=open&MOVES_BY_POS[pos];moves.push(pos);moves.push(avail)}
return moves}
function BB_getAvailMovesUnique(bb,cur,opp,uids){var open=BOARD_BITS&(~(bb[cur]|bb[opp]));var pins=bitScan(bb[cur]);var moves=[];for(var p=0;p<pins.length;p++){var pos=pins[p];var avail=open&MOVES_BY_POS[pos];while(avail){var minBit=avail&-avail;var dstPos=Math.log2(minBit>>>0);var boardCopy=bb.slice();BB_move(boardCopy,pos,dstPos);var uid=BB_toUid(boardCopy);if(!uids[uid]){moves.push(pos);moves.push(dstPos);moves.push(uid)}
avail&=avail-1}}
return moves}
function BB_getAvailFlys(bb,cur,opp){var open=BOARD_BITS&(~(bb[cur]|bb[opp]));var pins=bitScan(bb[cur]);var moves=[];for(var p=0;p<pins.length;p++){var pos=pins[p];moves.push(pos);moves.push(open)}
return moves}
function BB_getAvailFlysUnique(bb,cur,opp,uids){var open=BOARD_BITS&(~(bb[cur]|bb[opp]));var pins=bitScan(bb[cur]);var moves=[];for(var p=0;p<pins.length;p++){var pos=pins[p];var avail=open;while(avail){var minBit=avail&-avail;var dstPos=Math.log2(minBit>>>0);var boardCopy=bb.slice();BB_move(boardCopy,pos,dstPos);var uid=BB_toUid(boardCopy);moves.push(pos);moves.push(dstPos);moves.push(uid);avail&=avail-1}}
return moves}
function BB_getAvailRemoves(bb,cur,opp){var oppMills=bb[P_MILLS+opp];if(oppMills==0||oppMills==bb[opp])return bb[opp];var notInMill=(bb[opp]&(~oppMills));return notInMill}
function BB_isWin(bb,cur,opp){var men=bb[P_MEN+opp];var menOnBoard=men>>>MEN_DELIM;var menToPlace=men&0xf;var removed=PIN_COUNT-(menToPlace+menOnBoard);if(removed>=7&&menOnBoard<=2)return!0;else return!1}
function BB_place(bb,pos){var mode=MODE_PLACE;var cur=bb[TURN];var opp=+(!cur);var posMask=Math.pow(2,pos);bb[cur]|=posMask;bb[P_MEN+cur]+=0xf;var stridePos=2*pos;var mill1=MILLS_BY_POS_STRIDE[stridePos];var mill2=MILLS_BY_POS_STRIDE[stridePos+1];if((mill1&bb[cur])==mill1){bb[P_MILLS+cur]|=mill1;mode=MODE_REMOVE}
if((mill2&bb[cur])==mill2){bb[P_MILLS+cur]|=mill2;mode=MODE_REMOVE}
if(mode==MODE_REMOVE)bb[MODE]=MODE_REMOVE;else{bb[TURN]=opp;var men=bb[P_MEN+opp];var menInHand=men&0xf;var menOnBoard=men>>>MEN_DELIM;if(menInHand>0)bb[MODE]=MODE_PLACE;else if(menOnBoard<=3)bb[MODE]=MODE_FLY;else bb[MODE]=MODE_MOVE}}
function BB_remove(bb,pos){var opp=+(!bb[TURN]);var posMask=Math.pow(2,pos);bb[opp]^=posMask;bb[P_MEN+opp]-=0x10;if(posMask&bb[P_MILLS+opp]){var oppPins=bb[opp];var oppMills=0;for(var i=0;i<MILL_COUNT;i++){var mill=MILLS[i];if((oppPins&mill)==mill)oppMills|=mill}
bb[P_MILLS+opp]=oppMills}
bb[TURN]=opp;var men=bb[P_MEN+opp];var menToPlace=men&0xf;var menOnBoard=men>>>MEN_DELIM;if(menToPlace>0)bb[MODE]=MODE_PLACE;else if(menOnBoard<=3)bb[MODE]=MODE_FLY;else bb[MODE]=MODE_MOVE}
function BB_move(bb,srcPos,dstPos){var mode=MODE_MOVE;var cur=bb[TURN];var opp=+(!cur);var srcMask=Math.pow(2,srcPos);bb[cur]^=srcMask;bb[cur]|=Math.pow(2,dstPos);if(srcMask&bb[P_MILLS+cur]){var curMills=0;var curPins=bb[cur];for(var i=0;i<MILL_COUNT;i++){var mill=MILLS[i];if((curPins&mill)==mill)curMills|=mill}
bb[P_MILLS+cur]=curMills}
var stridePos=2*dstPos;var mill1=MILLS_BY_POS_STRIDE[stridePos];var mill2=MILLS_BY_POS_STRIDE[stridePos+1];if((mill1&bb[cur])==mill1){bb[P_MILLS+cur]|=mill1;mode=MODE_REMOVE}
if((mill2&bb[cur])==mill2){bb[P_MILLS+cur]|=mill2;mode=MODE_REMOVE}
if(mode==MODE_REMOVE)bb[MODE]=MODE_REMOVE;else{bb[TURN]=opp;var men=bb[P_MEN+opp];var menInHand=men&0xf;var menOnBoard=men>>>MEN_DELIM;if(menInHand>0)bb[MODE]=MODE_PLACE;else if(menOnBoard<=3)bb[MODE]=MODE_FLY;else bb[MODE]=MODE_MOVE}}
function BB_score(bb){var cur=bb[TURN];var opp=+(!cur);return BB_scoreSide(bb,cur,opp)-BB_scoreSide(bb,opp,cur)}
function BB_scoreSide(bb,cur,opp){var score=0;score+=bitCount(bb[P_MILLS+cur]);var men=bb[P_MEN+cur];var menToPlace=men&0xf;var menOnBoard=men>>>MEN_DELIM;var menRemoved=PIN_COUNT-(menToPlace+menOnBoard);score-=menRemoved;score+=menOnBoard;var moves=BB_getAvailMoves(bb,cur,opp,{});var moveCount=0;for(var m=1;m<moves.length;m+=2){moveCount+=bitCount(moves[m])}
score+=moveCount;return score}
function BB_print(bb){if(bb[TURN]==TURN1)console.log('Turn: Player1');else console.log('Turn: Player2');switch(bb[MODE]){case MODE_PLACE:console.log('Mode: Place');break;case MODE_MOVE:console.log('Mode: Move');break;case MODE_REMOVE:console.log('Mode: Remove');break;case MODE_FLY:console.log('Mode: Fly');break;default:console.log('Mode: ',bb[MODE],'(invalid)')}
var p1Men=bb[P1_MEN];var p2Men=bb[P2_MEN];var p1InHand=p1Men&0xf;var p2InHand=p2Men&0xf;var p1OnBoard=p1Men>>>MEN_DELIM;var p2OnBoard=p2Men>>>MEN_DELIM;var p1Removed=PIN_COUNT-(p1InHand+p1OnBoard);var p2Removed=PIN_COUNT-(p2InHand+p2OnBoard);console.log('P1 Pins: ','InHand('+p1InHand+'),','OnBoard('+p1OnBoard+'),','Removed('+p1Removed+')');console.log('P2 Pins: ','InHand('+p2InHand+'),','OnBoard('+p2OnBoard+'),','Removed('+p2Removed+')');console.log('P1 Board:','0x'+bb[P1].toString(16));console.log('P2 Board:','0x'+bb[P2].toString(16));console.log('P1 Mills:','0x'+bb[P1_MILLS].toString(16));console.log('P2 Mills:','0x'+bb[P2_MILLS].toString(16));console.log('https://gotankersley.github.io/9mm/#'+BB_toString(bb))}
function BB_addSym(bb,symHash){var p1=bb[P1];var p2=bb[P2];var state=new Uint8Array([p1,p1>>>8,p1>>>16,p2,p2>>>8,p2>>>16]);var modeTurn=Math.floor(TWO_TO_48*(bb[MODE]|(bb[TURN]<<4)));symHash[BB_rotSymState(state)+modeTurn]=!0;symHash[BB_rotSymState(state)+modeTurn]=!0;symHash[BB_rotSymState(state)+modeTurn]=!0;symHash[BB_rotSymState(state)+modeTurn]=!0;state[0]=FLIP_BYTE[state[0]];state[1]=FLIP_BYTE[state[1]];state[2]=FLIP_BYTE[state[2]];state[3]=FLIP_BYTE[state[3]];state[4]=FLIP_BYTE[state[4]];state[5]=FLIP_BYTE[state[5]];symHash[BB_rotSymState(state)+modeTurn]=!0;symHash[BB_rotSymState(state)+modeTurn]=!0;symHash[BB_rotSymState(state)+modeTurn]=!0;symHash[BB_rotSymState(state)+modeTurn]=!0}
function BB_rotSymState(state){state[0]=state[0]<<2|state[0]>>>6;state[1]=state[1]<<2|state[1]>>>6;state[2]=state[2]<<2|state[2]>>>6;state[3]=state[3]<<2|state[3]>>>6;state[4]=state[4]<<2|state[4]>>>6;state[5]=state[5]<<2|state[5]>>>6;var uid;uid=state[0];uid|=state[1]<<8;uid|=state[2]<<16;uid+=Math.floor(TWO_TO_24*state[3]);uid+=Math.floor(TWO_TO_32*state[4]);uid+=Math.floor(TWO_TO_40*state[5]);return uid}
function BB_toUid(bb){var uid;uid=bb[P1];uid+=Math.floor(TWO_TO_24*bb[P2]);uid+=Math.floor(TWO_TO_48*(bb[MODE]|(bb[TURN]<<4)));return uid}
function BB_fromUid(uid){var bb=new Uint32Array(STRUCT_COUNT);bb[P1]=uid;bb[P2]=Math.floor(uid/TWO_TO_24);var p1Count=bitCount(bb[P1]);var p2Count=bitCount(bb[P2]);bb[P1_MEN]=(p1Count<<MEN_DELIM)|(PIN_COUNT-p1Count);bb[P2_MEN]=(p2Count<<MEN_DELIM)|(PIN_COUNT-p2Count);for(var m=0;m<MILL_COUNT;m++){var mill=MILLS[m];if((bb[P1]&mill)==mill)bb[P1_MILLS]|=mill;if((bb[P2]&mill)==mill)bb[P2_MILLS]|=mill}
var modeTurn=Math.floor(uid/TWO_TO_48);bb[MODE]=modeTurn>>>4;bb[TURN]=(modeTurn&0xf);return bb}
function BB_deriveMove(originalBB,changedBB){var move={};var cur=originalBB[TURN];var opp=+(!cur);var mode=originalBB[MODE];original=originalBB[cur];changed=changedBB[cur];if(mode==MODE_PLACE){var delta=original^changed;var pos=Math.log2(delta);move.pr=POS_TO_R[pos];move.pc=POS_TO_C[pos]}
else if(mode&(MODE_MOVE|MODE_FLY)){var combined=original|changed;var src=Math.log2(changed^combined);var dst=Math.log2(original^combined);move.sr=POS_TO_R[src];move.sc=POS_TO_C[src];move.dr=POS_TO_R[dst];move.dc=POS_TO_C[dst]}
if(originalBB[opp]!==changedBB[opp]){var delta=originalBB[opp]^changedBB[opp];var pos=Math.log2(delta);move.rr=POS_TO_R[pos];move.rc=POS_TO_C[pos]}
return move}
var VALID=0;var INVALID_MODE=1;var INVALID_NO_MEN=2;var INVALID_NOT_EMPTY=3;var INVALID_SOURCE=4;var INVALID_MOVE=5;var INVALID_FLY=6;var INVALID_TURN=7;var INVALID_MILL_REMOVE=8;var GAME_IN_PLAY=0;var GAME_WIN=1;var GAME_TIE=2;function invalidMsg(invalid){switch(invalid){case VALID:return 'Valid';case INVALID_MODE:return 'Nope: wrong mode...';case INVALID_NO_MEN:return 'Nope: no men to place...';case INVALID_NOT_EMPTY:return 'Nope: spot not empty...';case INVALID_SOURCE:return 'Nope: no man there...';case INVALID_MOVE:return 'Nope: can\'t get there from here...';case INVALID_FLY:return 'Nope: too many men to fly...';case INVALID_TURN:return 'Nope: wrong player...';case INVALID_MILL_REMOVE:return 'Nope: can\'t remove from a mill...';default:return 'Nope: invalid...'}}
function Board(boardStr){if(boardStr)this.bb=BB_fromString(boardStr);else this.bb=BB_new()}
Board.prototype.copy=function(){var board=new Board();board.bb=this.bb.slice();return board}
Board.prototype.skip=function(){var bb=this.bb;bb[TURN]=+(!bb[TURN])}
Board.prototype.canSelect=function(r,c){var posMask=RC_TO_MASK[r][c];var bb=this.bb;var cur=bb[TURN];if((bb[cur]&posMask))return!0;else return!1}
Board.prototype.canPlace=function(r,c){var posMask=RC_TO_MASK[r][c];var bb=this.bb;var cur=bb[TURN];var opp=+(!cur);var open=BOARD_BITS&(~(bb[cur]|bb[opp]));var men=bb[P_MEN+cur];var menToPlace=men&0xf;if(bb[MODE]!=MODE_PLACE)return INVALID_MODE;else if(menToPlace<=0)return INVALID_NO_MEN;else if(!(posMask&open))return INVALID_NOT_EMPTY;else return VALID}
Board.prototype.place=function(r,c){var invalid=this.canPlace(r,c);if(!invalid){var pos=RC_TO_POS[r][c];BB_place(this.bb,pos)}
else Stage.sendMessage(invalidMsg(invalid))}
Board.prototype.canFly=function(sr,sc,dr,dc){var srcMask=RC_TO_MASK[sr][sc];var dstMask=RC_TO_MASK[dr][dc];var bb=this.bb;var cur=bb[TURN];var opp=+(!cur);var open=BOARD_BITS&(~(bb[cur]|bb[opp]));var men=bb[P_MEN+cur];var menToPlace=men&0xf;var menOnBoard=men>>>MEN_DELIM;if(bb[MODE]!=MODE_FLY)return INVALID_MODE;else if(menToPlace>0||menOnBoard>3)return INVALID_FLY;else if(!(bb[cur]&srcMask))return INVALID_SOURCE;else if(!(dstMask&open))return INVALID_NOT_EMPTY;else return VALID}
Board.prototype.canMove=function(sr,sc,dr,dc){var srcMask=RC_TO_MASK[sr][sc];var dstMask=RC_TO_MASK[dr][dc];var src=RC_TO_POS[sr][sc];var bb=this.bb;var cur=bb[TURN];var opp=+(!cur);var open=BOARD_BITS&(~(bb[cur]|bb[opp]));if(bb[MODE]!=MODE_MOVE)return INVALID_MODE;else if(!(bb[cur]&srcMask))return INVALID_SOURCE;else if(!(dstMask&open))return INVALID_NOT_EMPTY;else if(!(dstMask&MOVES_BY_POS[src]))return INVALID_MOVE;else return VALID}
Board.prototype.move=function(sr,sc,dr,dc){var invalid=(this.bb[MODE]==MODE_MOVE)?this.canMove(sr,sc,dr,dc):this.canFly(sr,sc,dr,dc);if(!invalid){var src=RC_TO_POS[sr][sc];var dst=RC_TO_POS[dr][dc];BB_move(this.bb,src,dst)}
else Stage.sendMessage(invalidMsg(invalid))}
Board.prototype.canRemove=function(r,c){var posMask=RC_TO_MASK[r][c];var bb=this.bb;var cur=bb[TURN];var opp=+(!cur);var oppMills=bb[P_MILLS+opp];var availToRemove=(oppMills==0||oppMills==bb[opp])?bb[opp]:(bb[opp]&(~oppMills));if(bb[MODE]!=MODE_REMOVE)throw INVALID_MODE;else if(!(bb[opp]&posMask))return INVALID_SOURCE;else if(!(posMask&availToRemove))return INVALID_MILL_REMOVE;else return VALID}
Board.prototype.remove=function(r,c){var invalid=this.canRemove(r,c);if(invalid===VALID){var pos=RC_TO_POS[r][c];BB_remove(this.bb,pos)}
else Stage.sendMessage(invalidMsg(invalid))}
Board.prototype.getTurn=function(){return this.bb[TURN]}
Board.prototype.getMode=function(){return this.bb[MODE]}
Board.prototype.getHand=function(turn){var men=this.bb[P_MEN+turn];var menOnBoard=men>>>MEN_DELIM;var menToPlace=men&0xf;var removed=PIN_COUNT-(menToPlace+menOnBoard);return[menToPlace,removed]}
Board.prototype.getPin=function(r,c){var bb=this.bb;var mpos=RC_TO_MASK[r][c];if(bb[P1]&mpos)return TURN1;else if(bb[P2]&mpos)return TURN2;else return EMPTY}
Board.prototype.getPlays=function(){var plays=[];var bb=this.bb;var mode=bb[MODE];if(mode==MODE_PLACE){var mask=BB_getPlays(bb);var posMasks=bitScan(mask);for(var p=0;p<posMasks.length;p++){var pos=posMasks[p];plays.push({pr:POS_TO_R[pos],pc:POS_TO_C[pos],})}}
else if(mode==MODE_REMOVE){var mask=BB_getPlays(bb);var posMasks=bitScan(mask);for(var p=0;p<posMasks.length;p++){var pos=posMasks[p];plays.push({rr:POS_TO_R[pos],rc:POS_TO_C[pos],})}}
else{var pins=BB_getPlays(bb);for(var p=0;p<pins.length;p+=2){var src=pins[p];var sr=POS_TO_R[src];var sc=POS_TO_C[src];var moves=bitScan(pins[p+1]);for(var m=0;m<moves.length;m++){var dst=moves[m];plays.push({sr:sr,sc:sc,dr:POS_TO_R[dst],dc:POS_TO_C[dst]})}}}
return plays}
Board.prototype.nmmmnToMove=function(nmmmn){nmmmn=nmmmn.toLowerCase().replace(/[^1-7a-g]/g,'')
var move={};var mode=this.bb[MODE];if(nmmmn.length==2){return{r:7-parseInt(nmmmn.charAt(1)),c:nmmmn.charCodeAt(0)-97,}}
else if(nmmmn.length==4){if(mode==MODE_PLACE){return{r:7-parseInt(nmmmn.charAt(1)),c:nmmmn.charCodeAt(0)-97,rr:7-parseInt(nmmmn.charAt(3)),rc:nmmmn.charCodeAt(2)-97,}}
else{return{sr:7-parseInt(nmmmn.charAt(1)),sc:nmmmn.charCodeAt(0)-97,dr:parseInt(nmmmn.charAt(3)),dc:nmmmn.charCodeAt(2)-97,}}}
else if(nmmmn.length==6){return{sr:7-parseInt(nmmmn.charAt(1)),sc:nmmmn.charCodeAt(0)-97,dr:7-parseInt(nmmmn.charAt(3)),dc:nmmmn.charCodeAt(2)-97,rr:7-parseInt(nmmmn.charAt(5)),rc:nmmmn.charCodeAt(4)-97,}}
else return null}
Board.prototype.play=function(move){var bb=this.bb;var mode=bb[MODE];if(mode==MODE_PLACE)BB_place(bb,RC_TO_POS[move.pr][move.pc]);else if(mode==MODE_REMOVE)BB_remove(bb,RC_TO_POS[move.rr][move.rc]);else{var src=RC_TO_POS[move.sr][move.sc];var dst=RC_TO_POS[move.dr][move.dc];BB_move(bb,src,dst)}}
Board.prototype.toString=function(){return BB_toString(this.bb)}
Board.prototype.isGameOver=function(){var bb=this.bb;var cur=bb[TURN];var opp=+(!cur);if(bb[MODE]==MODE_PLACE)return!1;else if(BB_isWin(bb,cur,opp))return!0;else if(BB_isWin(bb,opp,cur))return!0;else{var movesByPin=BB_getAvailMoves(bb,cur,opp);for(var p=0;p<movesByPin.length;p+=2){if(movesByPin[p+1])return!1}
return!0}}
'use strict'
var GAME_REPEAT_WINDOW=8;var PLAYER_HUMAN=0;var PLAYER_RANDOM=1;var PLAYER_NETWORK=2;var PLAYER_HEURISTIC=3;var PLAYER_MONTE_CARLO=4;var PLAYER_ALPHA_BETA=5;var PLAYER_BUSHES=6;var EVENT_INVALID=0;var EVENT_PLAYED=1;var EVENT_GAME_OVER=2;var EVENT_BOARD_UPDATE=3;var INFINITY=1000000;var INVALID=-1;function Game(boardStr){this.board=new Board(boardStr);boardStr=this.board.toString();this.history=[boardStr];this.memory={};this.memory[boardStr]=!0;this.undoHistory=[];this.players=[PLAYER_HUMAN,PLAYER_HUMAN];this.gameEvents={}}
Game.prototype.updateBoard=function(newBoard){this.board=newBoard;this.gameEvents[EVENT_BOARD_UPDATE](newBoard)}
Game.prototype.addEventListener=function(name,callback){this.gameEvents[name]=callback}
Game.prototype.onGameOver=function(){var loser=this.board.getTurn();this.gameEvents[EVENT_GAME_OVER](+(!loser),loser)}
Game.prototype.undoMove=function(){if(this.history.length>1){var oldStr=this.history.pop();this.undoHistory.push(oldStr);delete this.memory[oldStr];var boardStr=this.history[this.history.length-1];this.board=new Board(boardStr);return!0}
return!1}
Game.prototype.redoMove=function(){if(this.undoHistory.length>0){var savedStr=this.undoHistory.pop();this.history.push(savedStr);this.memory[savedStr]=!0;this.board=new Board(savedStr);if(this.board.isGameOver())this.onGameOver();return!0}
return!1}
Game.prototype.logCurrentState=function(board){var boardStr=board.toString();this.history.push(boardStr);this.memory[boardStr]=!0}
Game.prototype.play=function(){var board=this.board;var turn=board.getTurn();var player=this.players[turn];if(player==PLAYER_HUMAN)return;var plays=board.getPlays();if(plays.length==0)return this.onPlayed();else if(plays.length==1)return this.onPlayed(plays[0]);switch(player){case PLAYER_NETWORK:NetworkPlayer.getPlay(board,this.onPlayed);break;case PLAYER_RANDOM:RandomPlayer.getPlay(board,this.onPlayed);break;case PLAYER_HEURISTIC:HeuristicPlayer.getPlay(board,this.onPlayed);break;case PLAYER_MONTE_CARLO:MonteCarloPlayer.getPlay(board,this.onPlayed);break;case PLAYER_ALPHA_BETA:AlphaBetaPlayer.getPlay(board,this.onPlayed);break;case PLAYER_BUSHES:BushesPlayer.getPlay(board,this.onPlayed);break;default:alert('Invalid player')}}
Game.prototype.onPlayed=function(move){var self=game;if(!move){alert('No moves available - skipping player');self.board.skip();return self.gameEvents[EVENT_PLAYED]()}
var board=self.board;var mode=board.getMode();var turn=board.getTurn();var player=self.players[turn];if(mode==MODE_PLACE)board.place(move.pr,move.pc);else if(mode&(MODE_MOVE|MODE_FLY))board.move(move.sr,move.sc,move.dr,move.dc);if(move.hasOwnProperty('rr')&&move.hasOwnProperty('rc')){board.remove(move.rr,move.rc)}
self.logCurrentState(board);if(board.isGameOver())self.onGameOver();else self.gameEvents[EVENT_PLAYED](player,move)}
var RandomPlayer=(function(){function play(board,onPlayed){var plays=board.getPlays();if(!plays.length)return onPlayed();var randPlay=[Math.floor(Math.random()*plays.length)];return onPlayed(plays[randPlay])}
return{getPlay:play}})();var AlphaBetaPlayer=(function(){var MAX_DEPTH=6;var DEBUG=!1;var bestStateAtDepth=[];var bestScoreAtDepth=[];var uids={};var totalNodes=0;var rootNodes=[];function play(board,onPlayed){DEBUG=menu.showDebug;var bb=board.bb.slice();var cur=bb[TURN];var opp=+(!cur);MAX_DEPTH=bb[MODE]==MODE_MOVE?7:6;bestStateAtDepth=new Array(MAX_DEPTH);bestScoreAtDepth=new Array(MAX_DEPTH);uids={};totalNodes=0;rootNodes=[];var timeStart=performance.now();var bestScore=negamax(bb,cur,opp,-INFINITY,INFINITY,0);var duration=performance.now()-timeStart;var move={};var masterPlan;var depth=0;for(var r=MAX_DEPTH-1;r>=0;r--){if(bestStateAtDepth[r]){masterPlan=BB_toString(bestStateAtDepth[r]);depth=r;break}}
var bestState=bestStateAtDepth[0];if(bestScore>=INFINITY){var MAX_D=MAX_DEPTH-1;for(var d=1;d<MAX_D;d++){MAX_DEPTH=d;bestStateAtDepth=new Array(MAX_DEPTH);bestScoreAtDepth=new Array(MAX_DEPTH);totalNodes=0;rootNodes=[];var bestScore2=negamax(bb,cur,opp,-INFINITY,INFINITY,0);if(bestScore2>=INFINITY){bestState=bestStateAtDepth[0];break}}}
if(bestState)move=BB_deriveMove(bb,bestState);else{var plays=board.getPlays();if(!plays.length)return onPlayed({});move=plays[0]}
if(DEBUG){if(bestScore>=INFINITY)Stage.sendMessage('AB: Win found');else if(bestScore<=-INFINITY){Stage.sendMessage('AB: Inevitable loss')}
console.log('AlphaBeta Stats:');console.log('- time: '+duration+' ms');console.log('- total nodes: '+totalNodes);console.log('- best score: '+bestScore);console.log('- depth: '+depth);console.log('- root children: '+rootNodes.length);console.log('\n');move.viz={childScores:rootNodes}}
return onPlayed(move)}
function negamax(bb,cur,opp,alpha,beta,depth){if(depth>=MAX_DEPTH){return BB_score(bb)}
bestStateAtDepth[depth]=null;var bestScore=-INFINITY-depth;var children=BB_getChildStates(bb,cur,opp,uids);totalNodes+=children.length;for(var c=0;c<children.length;c++){var child=children[c];if(BB_isWin(child,cur,opp)){bestStateAtDepth[depth]=child;var levelOfInfinity=INFINITY+(MAX_DEPTH-depth);bestScoreAtDepth[depth]=levelOfInfinity;return levelOfInfinity}
var recursedScore=negamax(child,opp,cur,-beta,-Math.max(alpha,bestScore),depth+1);var currentScore=-recursedScore;if(depth==0){rootNodes.push({score:currentScore,move:BB_deriveMove(bb,child)})}
if(currentScore>bestScore){bestScore=currentScore;bestStateAtDepth[depth]=child;bestScoreAtDepth[depth]=currentScore;if(bestScore>=beta)return bestScore}}
return bestScore}
return{getPlay:play}})();var BushesPlayer=(function(){var MAX_DEPTH=6;var DEBUG=!1;var bestStateAtDepth=[];var bestScoreAtDepth=[];var uids={};var totalNodes=0;var rootNodes=[];function play(board,onPlayed){DEBUG=menu.showDebug;var bb=board.bb.slice();var cur=bb[TURN];var opp=+(!cur);MAX_DEPTH=bb[MODE]==MODE_MOVE?7:6;bestStateAtDepth=new Array(MAX_DEPTH);bestScoreAtDepth=new Array(MAX_DEPTH);uids={};totalNodes=0;rootNodes=[];var timeStart=performance.now();var bestScore=negamax(bb,cur,opp,-INFINITY,INFINITY,0);var duration=performance.now()-timeStart;var move={};var masterPlan;var depth=0;for(var r=MAX_DEPTH-1;r>=0;r--){if(bestStateAtDepth[r]){masterPlan=BB_toString(bestStateAtDepth[r]);depth=r;break}}
var bestState=bestStateAtDepth[0];if(bestScore>=INFINITY){var MAX_D=MAX_DEPTH-1;for(var d=1;d<MAX_D;d++){MAX_DEPTH=d;bestStateAtDepth=new Array(MAX_DEPTH);bestScoreAtDepth=new Array(MAX_DEPTH);totalNodes=0;rootNodes=[];var bestScore2=negamax(bb,cur,opp,-INFINITY,INFINITY,0);if(bestScore2>=INFINITY){bestState=bestStateAtDepth[0];break}}}
if(bestState)move=BB_deriveMove(bb,bestState);else{var plays=board.getPlays();if(!plays.length)return onPlayed({});move=plays[0]}
var winMsgs=['We all got Chicken-Duck-Woman thing, Waiting for us...','49 times, We fought that beast...',];var loseMsgs=['Dead horizon is all my macro-binoculars see...','My aunt and uncle, double suns, I’m sick of blue milk...'];if(bestScore<=-INFINITY)Stage.sendMessage(loseMsgs[Math.floor(Math.random()*loseMsgs.length)]);else if(bestScore>=INFINITY)Stage.sendMessage(winMsgs[Math.floor(Math.random()*winMsgs.length)]);return onPlayed(move)}
function negamax(bb,cur,opp,alpha,beta,depth){if(depth>=MAX_DEPTH){return BB_score(bb)}
bestStateAtDepth[depth]=null;var bestScore=-INFINITY-depth;var children=BB_getChildStates(bb,cur,opp,uids);totalNodes+=children.length;for(var c=0;c<children.length;c++){var child=children[c];if(BB_isWin(child,cur,opp)){bestStateAtDepth[depth]=child;var levelOfInfinity=INFINITY+(MAX_DEPTH-depth);bestScoreAtDepth[depth]=levelOfInfinity;return levelOfInfinity}
var recursedScore=negamax(child,opp,cur,-beta,-Math.max(alpha,bestScore),depth+1);var currentScore=-recursedScore;if(depth==0){rootNodes.push({score:currentScore,move:BB_deriveMove(bb,child)})}
if(currentScore>bestScore){bestScore=currentScore;bestStateAtDepth[depth]=child;bestScoreAtDepth[depth]=currentScore;if(bestScore>=beta)return bestScore}}
return bestScore}
return{getPlay:play}})();var HeuristicPlayer=(function(){function getPlay(board,onPlayed){var plays=board.getPlays();if(!plays.length)return onPlayed();var bestScore=-INFINITY;var bestPlay=-1;for(var p=0;p<plays.length;p++){var move=plays[p];var boardCopy=board.copy();boardCopy.play(move);var score=BB_score(boardCopy.bb);if(score>bestScore){bestScore=score;bestPlay=p}}
if(bestPlay<0){console.log('No best play found');bestPlay=0}
return onPlayed(plays[bestPlay])}
return{getPlay:getPlay}})();var MonteCarloPlayer=(function(){var MAX_ITERATIONS=1000;var MOVE_LIMIT=60;var MC_WIN=1;var MC_TIE=0;var MC_LOSE=-1;function play(board,onPlayed){var bb=board.bb;var plays=board.getPlays();if(!plays.length)return onPlayed();var currentTurn=bb[TURN];var bestScore=-INFINITY;var bestPlay=-1;for(s=0;s<plays.length;s++){var kidBoard=BB_playFromMove(bb,plays[s]);var score=0;for(var i=0;i<MAX_ITERATIONS;i++){var boardCopy=kidBoard.slice();var simResult=simulate(boardCopy,currentTurn);score+=simResult}
if(score>bestScore){bestScore=score;bestPlay=s}}
console.log('BestScore',bestScore);if(bestPlay<0)bestPlay=[Math.floor(Math.random()*plays.length)];return onPlayed(plays[bestPlay])}
function simulate(bb,currentTurn){var uids={};uids[BB_toUid(bb)]=!0;for(var p=0;p<MOVE_LIMIT;p++){var cur=bb[TURN];var opp=+(!cur);if(BB_isWin(bb,cur,opp)){if(cur==currentTurn)return MC_WIN;else return MC_LOSE}
else{var canMove=BB_makeRandomPlay(bb,uids);if(!canMove){if(cur==currentTurn)return MC_LOSE;else return MC_WIN}}}
return MC_TIE}
return{getPlay:play}})();var networkUrl=null;var NetworkPlayer=(function(){var URL='http://localhost:5000/';var playerId=+(new Date());function getPlay(board,onPlayed){if(!networkUrl)networkUrl=prompt('Enter a service URL',URL);var prev=game.history[game.history.length-1];var queryString='?id='+playerId+'&board='+board.toString()+'&prev='+prev;var url=networkUrl+queryString;ajax(url,function(data,status){if(data.hasOwnProperty('log'))console.log(data.log);var nmmmn=data.move;var move=board.nmmmnToMove(nmmmn);if(move)return onPlayed(move);else alert('Invalid move!')})}
function ajax(url,callback){var xhr=new XMLHttpRequest();xhr.open('GET',encodeURI(url));xhr.onload=function(){var data=JSON.parse(xhr.responseText);callback(data,xhr.status)};xhr.send()}
return{getPlay:getPlay}})();var MENU_PREFIX='9mm.';function MenuProperties(){this.player1=PLAYER_HUMAN;this.player2=PLAYER_HUMAN;this.showGrid=this.getDefault('showGrid',!1);this.showRemoved=this.getDefault('showRemoved',!0);this.showDebug=this.getDefault('showDebug',0);this.bitTool=function(){window.location='tools/bit-tool.html'}
this.movePhase1=function(){window.location.hash='2120122101100110002122120012'}
this.movePhase2=function(){window.location.hash='1211211022200220001211210012'}
this.flyPhase=function(){window.location.hash='1012000002000020001001110028'}}
MenuProperties.prototype.getDefault=function(propertyName,defaultValue){propertyName=MENU_PREFIX+propertyName;if(localStorage.getItem(propertyName)!==null){var val=localStorage.getItem(propertyName);if(val=='true')return!0;else if(val=='false')return!1;else return val}
else return defaultValue}
function MenuManager(){var PLAYER_OPTIONS={Human:PLAYER_HUMAN,Decent:PLAYER_ALPHA_BETA,Easy:PLAYER_RANDOM,Network:PLAYER_NETWORK};this.properties=new MenuProperties();this.rootMenu=new dat.GUI();var optionsMenu=this.rootMenu.addFolder('Options');optionsMenu.add(this.properties,'showGrid').onChange(this.persistChange);optionsMenu.add(this.properties,'showRemoved').onChange(this.persistChange);optionsMenu.add(this.properties,'showDebug').onChange(this.onChangeDebug);var linksMenu=this.rootMenu.addFolder('Links');linksMenu.add(this.properties,'movePhase1');linksMenu.add(this.properties,'movePhase2');linksMenu.add(this.properties,'flyPhase');this.rootMenu.add(this.properties,'player1',PLAYER_OPTIONS).onChange(this.onChangePlayer);this.rootMenu.add(this.properties,'player2',PLAYER_OPTIONS).onChange(this.onChangePlayer)}
var sayOnce=!1;MenuManager.prototype.onChangePlayer=function(val){game.players=[parseInt(menu.player1),parseInt(menu.player2)];if(parseInt(val)==PLAYER_BUSHES){if(!sayOnce){Stage.sendTitleMessage(['Every day','I worry','all day','about what’s waiting','in the bushes of love','...']);sayOnce=!0}}
game.play()}
MenuManager.prototype.onChangeDebug=function(val){localStorage.setItem(MENU_PREFIX+'showDebug',val);document.getElementById('analyze').style.display=val?'block':'none'}
MenuManager.prototype.persistChange=function(val){var propertyName=MENU_PREFIX+this.property;localStorage.setItem(propertyName,val)}
'use strict'
var Stage=(function(){var full=Url.getQueryString('readonly')?!1:!0;var CANVAS_SIZE=full?700:200;var HALF_CANVAS=CANVAS_SIZE/2;var GRID_COUNT=7;var GRID_SIZE=CANVAS_SIZE/GRID_COUNT;var HALF_GRID=GRID_SIZE/2;var QUARTER_GRID=GRID_SIZE/4;var RING_A=HALF_GRID;var RING_B=GRID_SIZE+HALF_GRID;var RING_C=(2*GRID_SIZE)+HALF_GRID;var COLOR_BOARD=full?'#e6caa6':'#d4c0a7';var COLOR_PATH='#786f5e';var COLOR_PLAYER1='#ff4242';var COLOR_PLAYER2='#8d8d8d';var COLOR_HOLE='#786f5e';var COLOR_SELECTED1='#e7aaaa';var COLOR_SELECTED2='#99d9ea';var COLOR_HOVER_HOLE1='#EDA58B';var COLOR_HOVER_HOLE2='#C6B49D';var COLOR_HOVER_REMOVE='#480000';var COLOR_HOVER_PLAYER1='#b52f2f';var COLOR_HOVER_PLAYER2='#c0c0c0';var COLOR_GRID='#333';var COLOR_SCORES='#000';var WIDTH_PATH=full?8:1;var WIDTH_WIN=3;var WIDTH_HOLE=full?10:5;var WIDTH_PIN=HALF_GRID/2;var WIDTH_GRID=0.5;var WIDTH_HAND=(4*WIDTH_PIN*PIN_COUNT)+40;var HOLE_CENTER=HALF_GRID-WIDTH_HOLE;var PIN_CENTER=HALF_GRID-WIDTH_PIN;var KEY_Z=90;var KEY_Y=89;var KEY_LEFT=37;var KEY_RIGHT=39;var MOVE_DELAY=500;var pinCanvas;var canvas;var canvasBounds;var ctx;var pinCtx;var analyze;var clearAnalyze;var childScores=[];var board;var cursor={x:0,y:0,r:0,c:0};var selected={r:-1};var mode;var turn;function init(newGame){if(full){var menuManager=new MenuManager();menu=menuManager.properties}
else menu=new MenuProperties();board=newGame.board;pinCanvas=document.getElementById('pinCanvas');canvas=document.getElementById('mainCanvas');canvasBounds=canvas.getBoundingClientRect();ctx=canvas.getContext('2d');pinCtx=pinCanvas.getContext('2d');ctx.font='bold 15px Verdana';analyze=document.getElementById('analyze');analyze.onclick=onAnalyze;if(!menu.showDebug)analyze.style.display='none';clearAnalyze=document.getElementById('clear-analyze');clearAnalyze.onclick=onClearAnalyze;if(full){canvas.addEventListener('click',onMouseClick.bind(this),!1);window.addEventListener('keydown',onKeyDown.bind(this),!1)}
canvas.addEventListener('mousemove',onMouseMove.bind(this),!1);game.addEventListener(EVENT_INVALID,onGameInvalid.bind(this));game.addEventListener(EVENT_GAME_OVER,onGameOver.bind(this));game.addEventListener(EVENT_PLAYED,onGamePlayed.bind(this));game.addEventListener(EVENT_BOARD_UPDATE,onGameBoardUpdate.bind(this));draw()}
function onKeyDown(e){var changed=!1;if(e.ctrlKey||e.keyCode==KEY_LEFT||e.keyCode==KEY_RIGHT){if(e.keyCode==KEY_Z||e.keyCode==KEY_LEFT){changed=game.undoMove()}
else if(e.keyCode==KEY_Y||e.keyCode==KEY_RIGHT){changed=game.redoMove()}
if(changed){board=game.board}}}
function onMouseMove(e){var x=e.clientX-canvasBounds.left;var y=e.cursorY=e.clientY-canvasBounds.top;cursor.x=x;cursor.y=y;cursor.r=Math.floor(y/GRID_SIZE);cursor.c=Math.floor(x/GRID_SIZE)}
function onMouseClick(e){var x=e.clientX-canvasBounds.left;var y=e.clientY-canvasBounds.top;var r=Math.floor(y/GRID_SIZE);var c=Math.floor(x/GRID_SIZE);if(r<0||r>=GRID_COUNT||c<0||c>=GRID_COUNT||RC_TO_POS[r][c]<0)return;if(game.players[turn]!=PLAYER_HUMAN)return;if(mode==MODE_PLACE)game.onPlayed({pr:r,pc:c});else if(mode==MODE_REMOVE)game.onPlayed({rr:r,rc:c});else if(mode&(MODE_MOVE|MODE_FLY)){var pin=board.getPin(r,c);if(pin==EMPTY&&selected.r>=0){game.onPlayed({sr:selected.r,sc:selected.c,dr:r,dc:c});selected={r:-1}}
else if(board.canSelect(r,c))selected={r:r,c:c}}}
function onClearAnalyze(e){childScores=[];clearAnalyze.style.display='none'}
function onAnalyze(e){if(menu.showDebug){clearAnalyze.style.display='block';AlphaBetaPlayer.getPlay(board,function(move){if(move.viz)setViz(move,board.getMode())})}}
function setViz(move,oldMode){var newViz=move.viz;var moveR;var moveC;if(move.hasOwnProperty('pr')){moveR=move.pr;moveC=move.pc}
else if(move.hasOwnProperty('sr')){moveR=move.sr;moveC=move.sc}
var scores=[];var moveHashY={};for(var i=0;i<newViz.childScores.length;i++){var child=newViz.childScores[i];var x;var y;var r;var c;var color=COLOR_SCORES;var multiY=!1;if(oldMode==MODE_PLACE){r=child.move.pr;c=child.move.pc;if(child.move.hasOwnProperty('rr'))multiY=!0;else{x=(c*GRID_SIZE)+QUARTER_GRID;y=(r*GRID_SIZE)+QUARTER_GRID+10}}
else if(oldMode==MODE_REMOVE){r=child.move.rr;c=child.move.rc;x=(c*GRID_SIZE)+QUARTER_GRID;y=(r*GRID_SIZE)+QUARTER_GRID+10}
else if(oldMode==MODE_MOVE||oldMode==MODE_FLY){r=child.move.sr;c=child.move.sc;multiY=!0}
if(multiY){var rcKey=r+','+c;if(!moveHashY[rcKey])moveHashY[rcKey]=1;else moveHashY[rcKey]++;x=(c*GRID_SIZE)+QUARTER_GRID;y=(r*GRID_SIZE)+QUARTER_GRID+((moveHashY[rcKey]-1)*20)}
if(child.move.hasOwnProperty('rr')){color='#f00'}
if(moveR==r&&moveC==c)color='#00f';var score={score:child.score,x:x,y:y,color:color};scores.push(score)}
childScores=scores}
function sendTitleMessage(texts,i){if(typeof(i)=='undefined')i=0;if(i>=texts.length)document.title='9mm';else{document.title=texts[i];setTimeout(function(){sendTitleMessage(texts,i+1)},1000)}}
function sendMessage(text){var msg=document.getElementById('message');msg.innerText=text;msg.style.display='block';setTimeout(function(){msg.style.display='none'},3000)}
function onGameInvalid(invalid){console.log('Invalid',invalidMsg(invalid))}
function onGameOver(winner,loser){var winText=(winner==TURN1)?'Player 1':'Player 2';sendMessage('Game over! '+winText+' wins')}
function onGamePlayed(playerType,move){board=game.board;var boardStr=board.toString();Url.setHash(boardStr);childScores=[];clearAnalyze.style.display='none';setTimeout(function(){if(!board.isGameOver())game.play()},MOVE_DELAY)}
function onGameBoardUpdate(newBoard){board=newBoard}
function draw(time){mode=board.getMode();turn=board.getTurn();pinCtx.fillStyle='#FFF';pinCtx.fillRect(0,0,1000,HALF_GRID);ctx.fillStyle=COLOR_BOARD;ctx.fillRect(0,0,CANVAS_SIZE,CANVAS_SIZE);drawHands();drawRings();for(var i=0;i<BOARD_COUNT;i++){var r=POS_TO_R[i];var c=POS_TO_C[i];var pin=board.getPin(r,c);if(pin==TURN1)drawPin(r,c,pin);else if(pin==TURN2)drawPin(r,c,pin);else drawHole(r,c)}
if(full)drawTurn();if(menu.showDebug&&full)drawChildScores();if(menu.showGrid)drawGrid();requestAnimationFrame(draw.bind(this))}
function drawHands(){var p1Hand=board.getHand(TURN1);var p2Hand=board.getHand(TURN2);pinCtx.fillStyle=COLOR_PLAYER1;var doublePin=2*WIDTH_PIN;var p1Men=p1Hand[0];for(var i=0;i<p1Men;i++){drawCircle(pinCtx,(i*doublePin),0,WIDTH_PIN,0)}
var availOffset;if(menu.showRemoved){availOffset=(p1Men*doublePin);for(var i=0;i<p1Hand[1];i++){pinCtx.fillStyle=COLOR_HOVER_HOLE1;drawCircle(pinCtx,availOffset+(i*doublePin),0,WIDTH_PIN,0)}}
pinCtx.fillStyle=COLOR_PLAYER2;var p2Men=p2Hand[0];availOffset=full?530:0;var offsetY=full?0:doublePin+10;for(var i=0;i<p2Men;i++){drawCircle(pinCtx,availOffset+(i*doublePin),offsetY,WIDTH_PIN,0)}
if(menu.showRemoved){availOffset+=(p2Men*doublePin);for(var i=0;i<p2Hand[1];i++){pinCtx.fillStyle=COLOR_HOVER_HOLE2;drawCircle(pinCtx,availOffset+(i*doublePin),offsetY,WIDTH_PIN,0)}}}
function drawGrid(){ctx.lineWidth=WIDTH_GRID;ctx.strokeStyle=COLOR_GRID;ctx.fillStyle=COLOR_PATH;var labelOffset=HALF_GRID;for(var i=0;i<GRID_COUNT;i++){var unit=i*GRID_SIZE;drawLine(ctx,unit,0,unit,CANVAS_SIZE);drawLine(ctx,0,unit,CANVAS_SIZE,unit);ctx.fillText(GRID_COUNT-i,10,unit+labelOffset+5);ctx.fillText(String.fromCharCode(97+i),unit+labelOffset-5,CANVAS_SIZE-10)}}
function drawRings(){ctx.lineWidth=WIDTH_PATH;ctx.strokeStyle=COLOR_PATH;drawRing(RING_A);drawRing(RING_B);drawRing(RING_C);drawLine(ctx,HALF_CANVAS,RING_A,HALF_CANVAS,RING_C);drawLine(ctx,HALF_CANVAS,CANVAS_SIZE-RING_C,HALF_CANVAS,CANVAS_SIZE-RING_A);drawLine(ctx,RING_A,HALF_CANVAS,RING_C,HALF_CANVAS);drawLine(ctx,CANVAS_SIZE-RING_C,HALF_CANVAS,CANVAS_SIZE-RING_A,HALF_CANVAS)}
function drawRing(ringSize){var doubleSize=2*ringSize;ctx.strokeRect(ringSize,ringSize,CANVAS_SIZE-doubleSize,CANVAS_SIZE-doubleSize)}
function drawPin(r,c,side){var drawRemove=!1;if(mode==MODE_MOVE||mode==MODE_FLY){if(selected.r==r&&selected.c==c){ctx.fillStyle=(side==TURN1)?COLOR_SELECTED1:COLOR_SELECTED2;drawCircle(ctx,(c*GRID_SIZE)+PIN_CENTER-4,(r*GRID_SIZE)+PIN_CENTER-4,WIDTH_PIN+4,0)}
if(side==turn&&cursor.r==r&&cursor.c==c)ctx.fillStyle=(side==TURN1)?COLOR_HOVER_PLAYER1:COLOR_HOVER_PLAYER2;else ctx.fillStyle=(side==TURN1)?COLOR_PLAYER1:COLOR_PLAYER2}
else if(mode==MODE_REMOVE){if(side!=turn&&cursor.r==r&&cursor.c==c)drawRemove=!0;ctx.fillStyle=(side==TURN1)?COLOR_PLAYER1:COLOR_PLAYER2}
else ctx.fillStyle=(side==TURN1)?COLOR_PLAYER1:COLOR_PLAYER2;var x=c*GRID_SIZE;var y=r*GRID_SIZE;drawCircle(ctx,x+PIN_CENTER,y+PIN_CENTER,WIDTH_PIN,0);if(drawRemove){ctx.strokeStyle=COLOR_HOVER_REMOVE;drawLine(ctx,x+QUARTER_GRID,y+QUARTER_GRID,x+GRID_SIZE-QUARTER_GRID,y+GRID_SIZE-QUARTER_GRID);drawLine(ctx,x+GRID_SIZE-QUARTER_GRID,y+QUARTER_GRID,x+QUARTER_GRID,y+GRID_SIZE-QUARTER_GRID)}}
function drawHole(r,c){var holeSize=WIDTH_HOLE;var holeCenter=HOLE_CENTER;if(cursor.r==r&&cursor.c==c&&mode!=MODE_REMOVE){if(mode==MODE_PLACE||selected.r>=0){ctx.fillStyle=(turn==TURN1)?COLOR_HOVER_HOLE1:COLOR_HOVER_HOLE2;holeSize=WIDTH_PIN-3;holeCenter=PIN_CENTER+3}
else ctx.fillStyle=COLOR_HOLE}
else ctx.fillStyle=COLOR_HOLE;drawCircle(ctx,(c*GRID_SIZE)+holeCenter,(r*GRID_SIZE)+holeCenter,holeSize,0)}
function drawTurn(){var text=(turn==TURN1)?'Player 1':'Player 2';switch(mode){case MODE_PLACE:text+=' Place';break;case MODE_MOVE:text+=' Move';break;case MODE_REMOVE:text+=' Remove';break;case MODE_FLY:text+=' Fly';break}
ctx.fillStyle=COLOR_PATH;ctx.fillText(text,10,20)}
function drawChildScores(){for(var c=0;c<childScores.length;c++){var child=childScores[c];ctx.fillStyle=child.color;ctx.fillText(child.score,child.x,child.y)}}
return{init:init,sendMessage:sendMessage,sendTitleMessage:sendTitleMessage}})()